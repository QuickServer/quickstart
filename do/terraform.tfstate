{
    "version": 3,
    "terraform_version": "0.11.10",
    "serial": 15,
    "lineage": "1f94cf41-4141-0d4f-9e6e-153daa89a809",
    "modules": [
        {
            "path": [
                "root"
            ],
            "outputs": {
                "rancher-url": {
                    "sensitive": false,
                    "type": "list",
                    "value": [
                        "https://206.189.139.66"
                    ]
                }
            },
            "resources": {
                "data.template_file.userdata_agent": {
                    "type": "template_file",
                    "depends_on": [
                        "digitalocean_droplet.rancherserver"
                    ],
                    "primary": {
                        "id": "8f479fdd2c97b9d57a425ed5c71078518817c79b1534dbb626bd98430b498e53",
                        "attributes": {
                            "id": "8f479fdd2c97b9d57a425ed5c71078518817c79b1534dbb626bd98430b498e53",
                            "rendered": "#!/bin/bash -x\nexport curlimage=appropriate/curl\nexport jqimage=stedolan/jq\nexport rancher_server_ip='206.189.139.66'\n\nif [ `command -v curl` ]; then\n  curl -sL https://releases.rancher.com/install-docker/18.06.sh | sh\nelif [ `command -v wget` ]; then\n  wget -qO- https://releases.rancher.com/install-docker/18.06.sh | sh\nfi\n\nfor image in $curlimage $jqimage; do\n  until docker inspect $image \u003e /dev/null 2\u003e\u00261; do\n    docker pull $image\n    sleep 2\n  done\ndone\n\nwhile true; do\n  docker run --rm $curlimage -sLk https://$rancher_server_ip/ping \u0026\u0026 break\n  sleep 5\ndone\n\n# Login\nwhile true; do\n\n    LOGINRESPONSE=$(docker run \\\n        --rm \\\n        $curlimage \\\n        -s \"https://$rancher_server_ip/v3-public/localProviders/local?action=login\" -H 'content-type: application/json' --data-binary '{\"username\":\"admin\",\"password\":\"bat777bat\"}' --insecure)\n    LOGINTOKEN=$(echo $LOGINRESPONSE | docker run --rm -i $jqimage -r .token)\n\n    if [ \"$LOGINTOKEN\" != \"null\" ]; then\n        break\n    else\n        sleep 5\n    fi\ndone\n\n# Get the Agent Image from the rancher server\nwhile true; do\n  AGENTIMAGE=$(docker run \\\n    --rm \\\n    $curlimage \\\n      -sLk \\\n      -H \"Authorization: Bearer $LOGINTOKEN\" \\\n      \"https://$rancher_server_ip/v3/settings/agent-image\" | docker run --rm -i $jqimage -r '.value')\n\n  if [ -n \"$AGENTIMAGE\" ]; then\n    break\n  else\n    sleep 5\n  fi\ndone\n\nuntil docker inspect $AGENTIMAGE \u003e /dev/null 2\u003e\u00261; do\n  docker pull $AGENTIMAGE\n  sleep 2\ndone\n\n# Test if cluster is created\nwhile true; do\n  CLUSTERID=$(docker run \\\n    --rm \\\n    $curlimage \\\n      -sLk \\\n      -H \"Authorization: Bearer $LOGINTOKEN\" \\\n      \"https://$rancher_server_ip/v3/clusters?name=ats-production\" | docker run --rm -i $jqimage -r '.data[].id')\n\n  if [ -n \"$CLUSTERID\" ]; then\n    break\n  else\n    sleep 5\n  fi\ndone\n\n# Get role flags from hostname\nROLEFLAG=`hostname | awk -F'-' '{ print $NF }'`\nif [[ \"$ROLEFLAG\" == \"all\" ]]; then\n  ROLEFLAG=\"all-roles\"\nfi\n\n# Get token\n# Test if cluster is created\nwhile true; do\n  AGENTCMD=$(docker run \\\n    --rm \\\n    $curlimage \\\n      -sLk \\\n      -H \"Authorization: Bearer $LOGINTOKEN\" \\\n      \"https://$rancher_server_ip/v3/clusterregistrationtoken?clusterId=$CLUSTERID\" | docker run --rm -i $jqimage -r '.data[].nodeCommand' | head -1)\n\n  if [ -n \"$AGENTCMD\" ]; then\n    break\n  else\n    sleep 5\n  fi\ndone\n\n# Combine command and flags\nCOMPLETECMD=\"$AGENTCMD --$ROLEFLAG\"\n\n# Run command\n$COMPLETECMD\n",
                            "template": "#!/bin/bash -x\nexport curlimage=appropriate/curl\nexport jqimage=stedolan/jq\nexport rancher_server_ip='${server_address}'\n\nif [ `command -v curl` ]; then\n  curl -sL https://releases.rancher.com/install-docker/${docker_version_agent}.sh | sh\nelif [ `command -v wget` ]; then\n  wget -qO- https://releases.rancher.com/install-docker/${docker_version_agent}.sh | sh\nfi\n\nfor image in $curlimage $jqimage; do\n  until docker inspect $image \u003e /dev/null 2\u003e\u00261; do\n    docker pull $image\n    sleep 2\n  done\ndone\n\nwhile true; do\n  docker run --rm $curlimage -sLk https://$rancher_server_ip/ping \u0026\u0026 break\n  sleep 5\ndone\n\n# Login\nwhile true; do\n\n    LOGINRESPONSE=$(docker run \\\n        --rm \\\n        $curlimage \\\n        -s \"https://$rancher_server_ip/v3-public/localProviders/local?action=login\" -H 'content-type: application/json' --data-binary '{\"username\":\"admin\",\"password\":\"${admin_password}\"}' --insecure)\n    LOGINTOKEN=$(echo $LOGINRESPONSE | docker run --rm -i $jqimage -r .token)\n\n    if [ \"$LOGINTOKEN\" != \"null\" ]; then\n        break\n    else\n        sleep 5\n    fi\ndone\n\n# Get the Agent Image from the rancher server\nwhile true; do\n  AGENTIMAGE=$(docker run \\\n    --rm \\\n    $curlimage \\\n      -sLk \\\n      -H \"Authorization: Bearer $LOGINTOKEN\" \\\n      \"https://$rancher_server_ip/v3/settings/agent-image\" | docker run --rm -i $jqimage -r '.value')\n\n  if [ -n \"$AGENTIMAGE\" ]; then\n    break\n  else\n    sleep 5\n  fi\ndone\n\nuntil docker inspect $AGENTIMAGE \u003e /dev/null 2\u003e\u00261; do\n  docker pull $AGENTIMAGE\n  sleep 2\ndone\n\n# Test if cluster is created\nwhile true; do\n  CLUSTERID=$(docker run \\\n    --rm \\\n    $curlimage \\\n      -sLk \\\n      -H \"Authorization: Bearer $LOGINTOKEN\" \\\n      \"https://$rancher_server_ip/v3/clusters?name=${cluster_name}\" | docker run --rm -i $jqimage -r '.data[].id')\n\n  if [ -n \"$CLUSTERID\" ]; then\n    break\n  else\n    sleep 5\n  fi\ndone\n\n# Get role flags from hostname\nROLEFLAG=`hostname | awk -F'-' '{ print $NF }'`\nif [[ \"$ROLEFLAG\" == \"all\" ]]; then\n  ROLEFLAG=\"all-roles\"\nfi\n\n# Get token\n# Test if cluster is created\nwhile true; do\n  AGENTCMD=$(docker run \\\n    --rm \\\n    $curlimage \\\n      -sLk \\\n      -H \"Authorization: Bearer $LOGINTOKEN\" \\\n      \"https://$rancher_server_ip/v3/clusterregistrationtoken?clusterId=$CLUSTERID\" | docker run --rm -i $jqimage -r '.data[].nodeCommand' | head -1)\n\n  if [ -n \"$AGENTCMD\" ]; then\n    break\n  else\n    sleep 5\n  fi\ndone\n\n# Combine command and flags\nCOMPLETECMD=\"$AGENTCMD --$ROLEFLAG\"\n\n# Run command\n$COMPLETECMD\n",
                            "vars.%": "5",
                            "vars.admin_password": "bat777bat",
                            "vars.cluster_name": "ats-production",
                            "vars.docker_version_agent": "18.06",
                            "vars.rancher_version": "v2.1.1",
                            "vars.server_address": "206.189.139.66"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "data.template_file.userdata_server": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "c968db178840c5d318dda317b3465b951389524321d763b47d8a54c5c00387e5",
                        "attributes": {
                            "id": "c968db178840c5d318dda317b3465b951389524321d763b47d8a54c5c00387e5",
                            "rendered": "#!/bin/bash -x\nexport curlimage=appropriate/curl\nexport jqimage=stedolan/jq\n\nif [ `command -v curl` ]; then\n  curl -sL https://releases.rancher.com/install-docker/18.06.sh | sh\nelif [ `command -v wget` ]; then\n  wget -qO- https://releases.rancher.com/install-docker/18.06.sh | sh\nfi\n\nfor image in $curlimage $jqimage \"rancher/rancher:v2.1.1\"; do\n  until docker inspect $image \u003e /dev/null 2\u003e\u00261; do\n    docker pull $image\n    sleep 2\n  done\ndone\n\ndocker run -d --restart=unless-stopped -p 80:80 -p 443:443 -v /root/rancher:/var/lib/rancher rancher/rancher:v2.1.1\n\nwhile true; do\n  docker run --rm --net=host $curlimage -sLk https://127.0.0.1/ping \u0026\u0026 break\n  sleep 5\ndone\n\n# Login\nwhile true; do\n\n    LOGINRESPONSE=$(docker run \\\n        --rm \\\n        --net=host \\\n        $curlimage \\\n        -s \"https://127.0.0.1/v3-public/localProviders/local?action=login\" -H 'content-type: application/json' --data-binary '{\"username\":\"admin\",\"password\":\"admin\"}' --insecure)\n    LOGINTOKEN=$(echo $LOGINRESPONSE | docker run --rm -i $jqimage -r .token)\n    echo \"Login Token is $LOGINTOKEN\"\n    if [ \"$LOGINTOKEN\" != \"null\" ]; then\n        break\n    else\n        sleep 5\n    fi\ndone\n\n\n# Change password\ndocker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/users?action=changepassword' -H 'content-type: application/json' -H \"Authorization: Bearer $LOGINTOKEN\" --data-binary '{\"currentPassword\":\"admin\",\"newPassword\":\"bat777bat\"}' --insecure\n\n# Create API key\nAPIRESPONSE=$(docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/token' -H 'content-type: application/json' -H \"Authorization: Bearer $LOGINTOKEN\" --data-binary '{\"type\":\"token\",\"description\":\"automation\"}' --insecure)\n\n# Extract and store token\nAPITOKEN=`echo $APIRESPONSE | docker run --rm -i $jqimage -r .token`\n\n# Configure server-url\nRANCHER_SERVER=\"https://$(docker run --rm --net=host $curlimage -s http://169.254.169.254/metadata/v1/interfaces/public/0/ipv4/address)\"\ndocker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/settings/server-url' -H 'content-type: application/json' -H \"Authorization: Bearer $APITOKEN\" -X PUT --data-binary '{\"name\":\"server-url\",\"value\":\"'$RANCHER_SERVER'\"}' --insecure\n\n# Create cluster\nCLUSTERRESPONSE=$(docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/cluster' -H 'content-type: application/json' -H \"Authorization: Bearer $APITOKEN\" --data-binary '{\"type\":\"cluster\",\"rancherKubernetesEngineConfig\":{\"addonJobTimeout\":30,\"ignoreDockerVersion\":true,\"sshAgentAuth\":false,\"type\":\"rancherKubernetesEngineConfig\",\"authentication\":{\"type\":\"authnConfig\",\"strategy\":\"x509\"},\"network\":{\"type\":\"networkConfig\",\"plugin\":\"canal\"},\"ingress\":{\"type\":\"ingressConfig\",\"provider\":\"nginx\"},\"services\":{\"type\":\"rkeConfigServices\",\"kubeApi\":{\"podSecurityPolicy\":false,\"type\":\"kubeAPIService\"},\"etcd\":{\"snapshot\":false,\"type\":\"etcdService\",\"extraArgs\":{\"heartbeat-interval\":500,\"election-timeout\":5000}}}},\"name\":\"ats-production\"}' --insecure)\n\n# Extract clusterid to use for generating the docker run command\nCLUSTERID=`echo $CLUSTERRESPONSE | docker run --rm -i $jqimage -r .id`\n\n# Generate registrationtoken\ndocker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/clusterregistrationtoken' -H 'content-type: application/json' -H \"Authorization: Bearer $APITOKEN\" --data-binary '{\"type\":\"clusterRegistrationToken\",\"clusterId\":\"'$CLUSTERID'\"}' --insecure",
                            "template": "#!/bin/bash -x\nexport curlimage=appropriate/curl\nexport jqimage=stedolan/jq\n\nif [ `command -v curl` ]; then\n  curl -sL https://releases.rancher.com/install-docker/${docker_version_server}.sh | sh\nelif [ `command -v wget` ]; then\n  wget -qO- https://releases.rancher.com/install-docker/${docker_version_server}.sh | sh\nfi\n\nfor image in $curlimage $jqimage \"rancher/rancher:${rancher_version}\"; do\n  until docker inspect $image \u003e /dev/null 2\u003e\u00261; do\n    docker pull $image\n    sleep 2\n  done\ndone\n\ndocker run -d --restart=unless-stopped -p 80:80 -p 443:443 -v /root/rancher:/var/lib/rancher rancher/rancher:${rancher_version}\n\nwhile true; do\n  docker run --rm --net=host $curlimage -sLk https://127.0.0.1/ping \u0026\u0026 break\n  sleep 5\ndone\n\n# Login\nwhile true; do\n\n    LOGINRESPONSE=$(docker run \\\n        --rm \\\n        --net=host \\\n        $curlimage \\\n        -s \"https://127.0.0.1/v3-public/localProviders/local?action=login\" -H 'content-type: application/json' --data-binary '{\"username\":\"admin\",\"password\":\"admin\"}' --insecure)\n    LOGINTOKEN=$(echo $LOGINRESPONSE | docker run --rm -i $jqimage -r .token)\n    echo \"Login Token is $LOGINTOKEN\"\n    if [ \"$LOGINTOKEN\" != \"null\" ]; then\n        break\n    else\n        sleep 5\n    fi\ndone\n\n\n# Change password\ndocker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/users?action=changepassword' -H 'content-type: application/json' -H \"Authorization: Bearer $LOGINTOKEN\" --data-binary '{\"currentPassword\":\"admin\",\"newPassword\":\"${admin_password}\"}' --insecure\n\n# Create API key\nAPIRESPONSE=$(docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/token' -H 'content-type: application/json' -H \"Authorization: Bearer $LOGINTOKEN\" --data-binary '{\"type\":\"token\",\"description\":\"automation\"}' --insecure)\n\n# Extract and store token\nAPITOKEN=`echo $APIRESPONSE | docker run --rm -i $jqimage -r .token`\n\n# Configure server-url\nRANCHER_SERVER=\"https://$(docker run --rm --net=host $curlimage -s http://169.254.169.254/metadata/v1/interfaces/public/0/ipv4/address)\"\ndocker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/settings/server-url' -H 'content-type: application/json' -H \"Authorization: Bearer $APITOKEN\" -X PUT --data-binary '{\"name\":\"server-url\",\"value\":\"'$RANCHER_SERVER'\"}' --insecure\n\n# Create cluster\nCLUSTERRESPONSE=$(docker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/cluster' -H 'content-type: application/json' -H \"Authorization: Bearer $APITOKEN\" --data-binary '{\"type\":\"cluster\",\"rancherKubernetesEngineConfig\":{\"addonJobTimeout\":30,\"ignoreDockerVersion\":true,\"sshAgentAuth\":false,\"type\":\"rancherKubernetesEngineConfig\",\"authentication\":{\"type\":\"authnConfig\",\"strategy\":\"x509\"},\"network\":{\"type\":\"networkConfig\",\"plugin\":\"canal\"},\"ingress\":{\"type\":\"ingressConfig\",\"provider\":\"nginx\"},\"services\":{\"type\":\"rkeConfigServices\",\"kubeApi\":{\"podSecurityPolicy\":false,\"type\":\"kubeAPIService\"},\"etcd\":{\"snapshot\":false,\"type\":\"etcdService\",\"extraArgs\":{\"heartbeat-interval\":500,\"election-timeout\":5000}}}},\"name\":\"${cluster_name}\"}' --insecure)\n\n# Extract clusterid to use for generating the docker run command\nCLUSTERID=`echo $CLUSTERRESPONSE | docker run --rm -i $jqimage -r .id`\n\n# Generate registrationtoken\ndocker run --rm --net=host $curlimage -s 'https://127.0.0.1/v3/clusterregistrationtoken' -H 'content-type: application/json' -H \"Authorization: Bearer $APITOKEN\" --data-binary '{\"type\":\"clusterRegistrationToken\",\"clusterId\":\"'$CLUSTERID'\"}' --insecure",
                            "vars.%": "4",
                            "vars.admin_password": "bat777bat",
                            "vars.cluster_name": "ats-production",
                            "vars.docker_version_server": "18.06",
                            "vars.rancher_version": "v2.1.1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "digitalocean_droplet.rancheragent-medium-all": {
                    "type": "digitalocean_droplet",
                    "depends_on": [
                        "data.template_file.userdata_agent"
                    ],
                    "primary": {
                        "id": "118239066",
                        "attributes": {
                            "backups": "false",
                            "disk": "160",
                            "id": "118239066",
                            "image": "ubuntu-16-04-x64",
                            "ipv4_address": "142.93.220.108",
                            "ipv4_address_private": "",
                            "ipv6": "false",
                            "ipv6_address": "",
                            "ipv6_address_private": "",
                            "locked": "false",
                            "memory": "8192",
                            "monitoring": "false",
                            "name": "myrancher-rancheragent-medium-0-all",
                            "price_hourly": "0.05952",
                            "price_monthly": "40",
                            "private_networking": "false",
                            "region": "blr1",
                            "resize_disk": "true",
                            "size": "s-4vcpu-8gb",
                            "status": "active",
                            "tags.#": "0",
                            "user_data": "60f920d1bf6fc7c50ade4867530b6ea00aefab27",
                            "vcpus": "4",
                            "volume_ids.#": "0"
                        },
                        "meta": {
                            "schema_version": "1"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.digitalocean"
                },
                "digitalocean_droplet.rancheragent-small-all.0": {
                    "type": "digitalocean_droplet",
                    "depends_on": [
                        "data.template_file.userdata_agent"
                    ],
                    "primary": {
                        "id": "118239065",
                        "attributes": {
                            "backups": "false",
                            "disk": "80",
                            "id": "118239065",
                            "image": "ubuntu-16-04-x64",
                            "ipv4_address": "142.93.223.162",
                            "ipv4_address_private": "",
                            "ipv6": "false",
                            "ipv6_address": "",
                            "ipv6_address_private": "",
                            "locked": "false",
                            "memory": "4096",
                            "monitoring": "false",
                            "name": "myrancher-rancheragent-small-0-all",
                            "price_hourly": "0.02976",
                            "price_monthly": "20",
                            "private_networking": "false",
                            "region": "blr1",
                            "resize_disk": "true",
                            "size": "s-2vcpu-4gb",
                            "status": "active",
                            "tags.#": "0",
                            "user_data": "60f920d1bf6fc7c50ade4867530b6ea00aefab27",
                            "vcpus": "2",
                            "volume_ids.#": "0"
                        },
                        "meta": {
                            "schema_version": "1"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.digitalocean"
                },
                "digitalocean_droplet.rancheragent-small-all.1": {
                    "type": "digitalocean_droplet",
                    "depends_on": [
                        "data.template_file.userdata_agent"
                    ],
                    "primary": {
                        "id": "118239067",
                        "attributes": {
                            "backups": "false",
                            "disk": "80",
                            "id": "118239067",
                            "image": "ubuntu-16-04-x64",
                            "ipv4_address": "142.93.210.51",
                            "ipv4_address_private": "",
                            "ipv6": "false",
                            "ipv6_address": "",
                            "ipv6_address_private": "",
                            "locked": "false",
                            "memory": "4096",
                            "monitoring": "false",
                            "name": "myrancher-rancheragent-small-1-all",
                            "price_hourly": "0.02976",
                            "price_monthly": "20",
                            "private_networking": "false",
                            "region": "blr1",
                            "resize_disk": "true",
                            "size": "s-2vcpu-4gb",
                            "status": "active",
                            "tags.#": "0",
                            "user_data": "60f920d1bf6fc7c50ade4867530b6ea00aefab27",
                            "vcpus": "2",
                            "volume_ids.#": "0"
                        },
                        "meta": {
                            "schema_version": "1"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.digitalocean"
                },
                "digitalocean_droplet.rancherserver": {
                    "type": "digitalocean_droplet",
                    "depends_on": [
                        "data.template_file.userdata_server"
                    ],
                    "primary": {
                        "id": "118238950",
                        "attributes": {
                            "backups": "false",
                            "disk": "60",
                            "id": "118238950",
                            "image": "ubuntu-16-04-x64",
                            "ipv4_address": "206.189.139.66",
                            "ipv4_address_private": "",
                            "ipv6": "false",
                            "ipv6_address": "",
                            "ipv6_address_private": "",
                            "locked": "false",
                            "memory": "3072",
                            "monitoring": "false",
                            "name": "myrancher-rancherserver",
                            "price_hourly": "0.02232",
                            "price_monthly": "15",
                            "private_networking": "false",
                            "region": "blr1",
                            "resize_disk": "true",
                            "size": "s-1vcpu-3gb",
                            "status": "active",
                            "tags.#": "0",
                            "user_data": "9fc32a08f711a9f179f949d85c4d9aef9dbf7f83",
                            "vcpus": "1",
                            "volume_ids.#": "0"
                        },
                        "meta": {
                            "schema_version": "1"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.digitalocean"
                }
            },
            "depends_on": []
        }
    ]
}
